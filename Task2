import socket
import subprocess
import requests
import threading

# scan open ports on a given host
def scan_ports(host):
    print(f"[*] Scanning ports on {host}...")
    open_ports = []
    for port in range(1, 1025):  # Scan ports from 1 to 1024
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        socket.setdefaulttimeout(1)
        result = sock.connect_ex((host, port))
        if result == 0:
            open_ports.append(port)
        sock.close()
    print(f"[+] Open ports on {host}: {open_ports}")

# check for outdated software versions using the CVE database
def check_software_versions(software_list):
    print("[*] Checking software versions for vulnerabilities...")
    for software, version in software_list.items():
        cve_url = f"https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword={software}+{version}"
        try:
            response = requests.get(cve_url)
            if "No matches" not in response.text:
                print(f"[!] {software} {version} might have vulnerabilities. Check CVE: {cve_url}")
            else:
                print(f"[+] {software} {version} appears to be up to date.")
        except requests.RequestException as e:
            print(f"[!] Error checking {software}: {e}")

#check for common misconfigurations (e.g., HTTP headers)
def check_misconfigurations(host):
    print(f"[*] Checking for misconfigurations on {host}...")
    try:
        response = requests.get(f"http://{host}")
        headers = response.headers
        
        # Check for X-Frame-Options header
        if 'X-Frame-Options' not in headers:
            print("[!] X-Frame-Options header is missing. Possible clickjacking vulnerability.")
        
        # Check for Content-Security-Policy header
        if 'Content-Security-Policy' not in headers:
            print("[!] Content-Security-Policy header is missing. Possible XSS vulnerability.")
        
        print("[+] Misconfiguration check complete.")
    except requests.RequestException as e:
        print(f"[!] Error checking misconfigurations on {host}: {e}")

# Main function to perform the scan
def run_scan(target_host, software_list):
    # Multithreading for efficiency
    threads = []
    
    # Start port scanning in a separate thread
    port_thread = threading.Thread(target=scan_ports, args=(target_host,))
    threads.append(port_thread)
    port_thread.start()
    
    # Start software version checking in a separate thread
    version_thread = threading.Thread(target=check_software_versions, args=(software_list,))
    threads.append(version_thread)
    version_thread.start()
    
    # Start misconfiguration checking in a separate thread
    misconfig_thread = threading.Thread(target=check_misconfigurations, args=(target_host,))
    threads.append(misconfig_thread)
    misconfig_thread.start()
    
    # Wait for all threads to finish
    for thread in threads:
        thread.join()
    
    print("[*] Scan completed.")

# Example usage
if __name__ == "__main__":
    target = "shopclues.com"  # Replace with the target hostname or IP address
    software_versions = {
        "nginx": "1.18.0",
        "openssl": "1.1.1",
        "python": "3.8.10"
    }
    
    run_scan(target, software_versions)
